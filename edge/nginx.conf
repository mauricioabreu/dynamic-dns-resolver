events {
  worker_connections 1024;
}

error_log stderr;

http {
  access_log /dev/stdout;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua;/lua/src/lua-resty-resolver/lib/?.lua;;";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  lua_shared_dict dns_cache 1m;

  # create a global master which caches DNS answers according to upstream TTL
  init_by_lua_block {
    dns_resolver = require 'dns_resolver'
    master_dns = dns_resolver.new_master{
      cache="dns_cache", upstream_domain = "upstream.ddnsr-demo.com", dns_servers = {"172.20.0.2"}
    }
  }

  init_worker_by_lua_block {
    client_dns = dns_resolver.new_client(master_dns)
  }

  upstream hello_backend {
    server 0.0.0.1; # just an invalid address as a place holder

    balancer_by_lua_block {
      local ok, err = dns_resolver.set_address(
        client_dns, {exp_fallback_ok = true, port = "443"}
      )
      if not ok then
        ngx.log(ngx.ERR, "failed to set upstream address: ", err)
        return ngx.exit(500)
      end
    }

    keepalive 10; # connection pool MUST come after balancer_by_lua_block
  }

  server {
    listen 8080;

    location =/status {
      content_by_lua_block {
        local upstream_address, err = hello_client:get()
        if upstream_address then
          ngx.say("OK")
        else
          ngx.say(err)
          ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
        end
      }
    }

    location / {
      proxy_pass https://hello_backend/;
      proxy_pass_header Server;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host ddnsr-demo.com;
      add_header  X-Upstream  $upstream_addr;
    }
  }
}